<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --primary-color: #1a73e8;
      --accent-color: #27ae60;
      --danger-color: #e74c3c;
      --background-color: #f8f9fa;
      --text-color: #2c3e50;
      --border-color: #e9ecef;
      --progress-color: #4CAF50;
    }

    body {
      font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.6;
      margin: 0;
      padding: 0;
    }

    .checkout-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 2rem;
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
    }

    .progress-bar {
      width: 100%;
      background-color: white;
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
    }

    .progress-steps {
      display: flex;
      justify-content: space-between;
      position: relative;
      margin-bottom: 30px;
    }

    .progress-steps::before {
      content: '';
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      height: 4px;
      width: 100%;
      background-color: var(--border-color);
      z-index: 0;
    }

    .progress-step {
      position: relative;
      z-index: 1;
      background-color: white;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      border: 4px solid var(--border-color);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .progress-step.active {
      border-color: var(--progress-color);
      background-color: var(--progress-color);
      color: white;
    }

    .cart-items {
      background-color: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .cart-item {
      display: grid;
      grid-template-columns: auto 1fr auto;
      gap: 1.5rem;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      align-items: center;
    }

    .cart-item:last-child {
      border-bottom: none;
    }

    .item-image {
      width: 120px;
      height: 120px;
      object-fit: contain;
      border-radius: 8px;
      background-color: #f5f5f5;
      padding: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .item-details h3 {
      margin: 0 0 0.5rem 0;
      color: var(--primary-color);
    }

    .item-price {
      color: var(--text-color);
      font-weight: bold;
    }

    .quantity-controls {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .btn-quantity {
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 4px;
      width: 30px;
      height: 30px;
      cursor: pointer;
      font-size: 1.2rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .order-summary {
      background-color: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      height: fit-content;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
    }

    .summary-total {
      display: flex;
      justify-content: space-between;
      font-size: 1.2rem;
      font-weight: bold;
      margin-top: 1rem;
      padding-top: 1rem;
      border-top: 2px solid var(--border-color);
    }

    .checkout-actions {
      margin-top: 2rem;
      display: flex;
      gap: 1rem;
    }

    .btn {
      padding: 1rem 2rem;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-primary {
      background-color: var(--accent-color);
      color: white;
      width: 100%;
    }

    .btn-primary:hover {
      background-color: #219a52;
      transform: scale(1.02);
    }

    .btn-outline {
      background-color: transparent;
      border: 2px solid var(--primary-color);
      color: var(--primary-color);
    }

    .btn-outline:hover {
      background-color: var(--primary-color);
      color: white;
    }
  </style>
</head>
<body>
  <div class="progress-bar">
    <div class="progress-steps">
      <div class="progress-step active">1</div>
      <div class="progress-step">2</div>
      <div class="progress-step">3</div>
    </div>
  </div>

  <div class="checkout-container">
    <div class="cart-items">
      <h2>Tu Carrito</h2>
      {{#if cart.products.length}}
        {{#each cart.products}}
          <div class="cart-item">
            <img src="{{this.product.thumbnail}}" alt="{{this.product.title}}" class="item-image" onerror="this.src='/img/product-placeholder.jpg'">
            <div class="item-details">
              <h3>{{this.product.title}}</h3>
              <p class="item-price">${{this.product.price}}</p>
            </div>
            <div class="quantity-controls">
              <button class="btn-quantity" onclick="updateQuantity('{{../cart._id}}', '{{this.product._id}}', 'subtract')">-</button>
              <span class="quantity" data-product-id="{{this.product._id}}">{{this.quantity}}</span>
              <button class="btn-quantity" onclick="updateQuantity('{{../cart._id}}', '{{this.product._id}}', 'add')">+</button>
              <button class="btn btn-outline" onclick="deleteProduct('{{../cart._id}}', '{{this.product._id}}')">Eliminar</button>
            </div>
          </div>
        {{/each}}
      {{else}}
        <p class="empty-cart-message">Tu carrito está vacío</p>
      {{/if}}
    </div>

    <div class="order-summary">
      <h2>Resumen del Pedido</h2>
      <div class="summary-item">
        <span>Subtotal</span>
        <span>$100.00</span>
      </div>
      <div class="summary-item">
        <span>Envío</span>
        <span>$10.00</span>
      </div>
      <div class="summary-item">
        <span>Impuestos</span>
        <span>$21.00</span>
      </div>
      <div class="summary-total">
        <span>Total</span>
        <span>$131.00</span>
      </div>
      <div class="checkout-actions">
        <button class="btn btn-primary" onclick="checkout('{{cart._id}}')">Proceder al Pago</button>
      </div>
    </div>
  </div>

  <script>
    async function updateQuantity(cartId, productId, action) {
      try {
        const quantityElement = document.querySelector(`[data-product-id="${productId}"]`);
        if (!quantityElement) {
          Swal.fire({
            title: 'Error',
            text: 'No se pudo encontrar la cantidad del producto.',
            icon: 'error',
            confirmButtonText: 'Aceptar'
          });
          return;
        }

        const currentQuantity = parseInt(quantityElement.textContent, 10);
        if (action === "subtract" && currentQuantity <= 1) {
          Swal.fire({
            title: 'Aviso',
            text: 'La cantidad mínima permitida es 1.',
            icon: 'warning',
            confirmButtonText: 'Aceptar'
          });
          return;
        }

        const quantityChange = action === "add" ? 1 : -1;
        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ quantity: quantityChange }),
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.json();
          Swal.fire({
            title: 'Error',
            text: `Error: ${error.message}`,
            icon: 'error',
            confirmButtonText: 'Aceptar',
            confirmButtonColor: '#d32f2f'
          });
        }
      } catch (error) {
        console.error("Error:", error);
        Swal.fire({
          title: 'Error',
          text: 'Hubo un problema al actualizar la cantidad.',
          icon: 'error',
          confirmButtonText: 'Aceptar'
        });
      }
    }

    async function deleteProduct(cartId, productId) {
      try {
        const result = await Swal.fire({
          title: '¿Estás seguro?',
          text: '¿Deseas eliminar este producto del carrito?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Sí, eliminar',
          cancelButtonText: 'Cancelar',
          confirmButtonColor: '#d32f2f'
        });

        if (result.isConfirmed) {
          const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const error = await response.json();
            Swal.fire({
              title: 'Error',
              text: `Error: ${error.message}`,
              icon: 'error',
              confirmButtonText: 'Aceptar',
              confirmButtonColor: '#d32f2f'
            });
          }
        }
      } catch (error) {
        console.error("Error:", error);
        Swal.fire({
          title: 'Error',
          text: 'Hubo un problema al eliminar el producto.',
          icon: 'error',
          confirmButtonText: 'Aceptar'
        });
      }
    }

    async function checkout(cartId) {
      try {
        const response = await fetch(`/api/carts/${cartId}/checkout`, {
          method: 'POST'
        });

        if (response.ok) {
          await Swal.fire({
            title: '¡Éxito!',
            text: '¡Compra realizada con éxito!',
            icon: 'success',
            confirmButtonText: 'Aceptar',
            confirmButtonColor: '#27ae60'
          });
          window.location.href = "/";
        } else {
          await Swal.fire({
            title: 'Error',
            text: 'Hubo un problema al realizar la compra.',
            icon: 'error',
            confirmButtonText: 'Aceptar',
            confirmButtonColor: '#e74c3c'
          });
        }
      } catch (error) {
        console.error("Error al realizar la compra:", error);
        await Swal.fire({
          title: 'Error',
          text: 'Ocurrió un error inesperado al procesar la compra.',
          icon: 'error',
          confirmButtonText: 'Aceptar',
          confirmButtonColor: '#e74c3c'
        });
      }
    }
  </script>
</body>
</html>